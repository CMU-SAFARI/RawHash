function(enable_ccache)
        # export PATH="/usr/lib/ccache:$PATH"
        find_program(CCACHE_EXE ccache)
        if(CCACHE_EXE)
                message(STATUS "found ccache at ${CCACHE_EXE}, using it")
                set(CMAKE_C_COMPILER_LAUNCHER "${CCACHE_EXE}" CACHE STRING "C compiler launcher")
                set(CMAKE_CXX_COMPILER_LAUNCHER "${CCACHE_EXE}" CACHE STRING "C++ compiler launcher")        
        else()
                message(STATUS "ccache not found, not using it")
        endif()
endfunction()

# mold is a much faster linker than ld, also see for mold: https://github.com/heavyai/heavydb/blob/master/CMakeLists.txt
# or try: https://gitlab.kitware.com/cmake/cmake/-/merge_requests/8861, can now use CMAKE_LINKER_TYPE
macro(set_alternate_linker linker)
  find_program(LINKER_EXECUTABLE ld.${linker} ${linker})
  if(LINKER_EXECUTABLE)
    message(STATUS "Found linker ${linker}: ${LINKER_EXECUTABLE}")
    if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" AND "${CMAKE_CXX_COMPILER_VERSION}" VERSION_LESS 12.0.0)
      add_link_options("-ld-path=${linker}")
    elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" AND "${CMAKE_CXX_COMPILER_VERSION}" VERSION_LESS 12.1.0 AND "${linker}" STREQUAL "mold")
      # LINKER_EXECUTABLE will be a full path to ld.mold, so we replace the end of the path, resulting in the relative
      # libexec/mold dir, and tell GCC to look there first for an override version of executables, in this case, ld
      string(REPLACE "bin/ld.mold" "libexec/mold" PATH_TO_LIBEXEC_MOLD ${LINKER_EXECUTABLE})
      add_link_options("-B${PATH_TO_LIBEXEC_MOLD}")
    else()
      add_link_options("-fuse-ld=${linker}")
    endif()
  else()
    message(FATAL_ERROR "Could not find linker ${linker}")
  endif()
endmacro()

# not working
# function(setup_ccache_mold)
#     if(USE_CCACHE)
#         find_program(CCACHE_PROGRAM ccache)
#         if(CCACHE_PROGRAM)
#             message(STATUS "ccache found: ${CCACHE_PROGRAM}")
#             set(CMAKE_C_COMPILER_LAUNCHER "${CCACHE_PROGRAM}")
#             set(CMAKE_CXX_COMPILER_LAUNCHER "${CCACHE_PROGRAM}")
#         else()
#             message(WARNING "ccache not found, using default compiler")
#         endif()
#     endif()

#     if(USE_MOLD)
#         find_program(MOLD_PROGRAM mold)
#         # todo: does not seem to work, for a working configuration, see https://github.com/ratschlab/readuntil_fake/blob/refactor/cmake/utils.cmake
#         if(MOLD_PROGRAM)
#             message(STATUS "mold found: ${MOLD_PROGRAM}")
#             set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=${MOLD_PROGRAM}")
#         else()
#             message(WARNING "mold not found, using default linker")
#         endif()
#     endif()
# endfunction()
